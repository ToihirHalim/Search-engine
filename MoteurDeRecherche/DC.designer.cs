#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoteurDeRecherche
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="maBase1")]
	public partial class DCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertMot(Mot instance);
    partial void UpdateMot(Mot instance);
    partial void DeleteMot(Mot instance);
    partial void InsertRecherche(Recherche instance);
    partial void UpdateRecherche(Recherche instance);
    partial void DeleteRecherche(Recherche instance);
    partial void InsertHistorique(Historique instance);
    partial void UpdateHistorique(Historique instance);
    partial void DeleteHistorique(Historique instance);
    partial void InsertLien(Lien instance);
    partial void UpdateLien(Lien instance);
    partial void DeleteLien(Lien instance);
    #endregion
		
		public DCDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["maBase1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Mot> Mot
		{
			get
			{
				return this.GetTable<Mot>();
			}
		}
		
		public System.Data.Linq.Table<Recherche> Recherche
		{
			get
			{
				return this.GetTable<Recherche>();
			}
		}
		
		public System.Data.Linq.Table<Historique> Historique
		{
			get
			{
				return this.GetTable<Historique>();
			}
		}
		
		public System.Data.Linq.Table<Lien> Lien
		{
			get
			{
				return this.GetTable<Lien>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mot")]
	public partial class Mot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdMot;
		
		private string _Texte;
		
		private EntitySet<Recherche> _Recherche;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMotChanging(int value);
    partial void OnIdMotChanged();
    partial void OnTexteChanging(string value);
    partial void OnTexteChanged();
    #endregion
		
		public Mot()
		{
			this._Recherche = new EntitySet<Recherche>(new Action<Recherche>(this.attach_Recherche), new Action<Recherche>(this.detach_Recherche));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMot", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdMot
		{
			get
			{
				return this._IdMot;
			}
			set
			{
				if ((this._IdMot != value))
				{
					this.OnIdMotChanging(value);
					this.SendPropertyChanging();
					this._IdMot = value;
					this.SendPropertyChanged("IdMot");
					this.OnIdMotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Texte", DbType="VarChar(200)")]
		public string Texte
		{
			get
			{
				return this._Texte;
			}
			set
			{
				if ((this._Texte != value))
				{
					this.OnTexteChanging(value);
					this.SendPropertyChanging();
					this._Texte = value;
					this.SendPropertyChanged("Texte");
					this.OnTexteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mot_Recherche", Storage="_Recherche", ThisKey="IdMot", OtherKey="IdMot")]
		public EntitySet<Recherche> Recherche
		{
			get
			{
				return this._Recherche;
			}
			set
			{
				this._Recherche.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Recherche(Recherche entity)
		{
			this.SendPropertyChanging();
			entity.Mot = this;
		}
		
		private void detach_Recherche(Recherche entity)
		{
			this.SendPropertyChanging();
			entity.Mot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recherche")]
	public partial class Recherche : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdSearch;
		
		private int _IdMot;
		
		private int _IdLien;
		
		private EntitySet<Historique> _Historique;
		
		private EntityRef<Mot> _Mot;
		
		private EntityRef<Lien> _Lien;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdSearchChanging(int value);
    partial void OnIdSearchChanged();
    partial void OnIdMotChanging(int value);
    partial void OnIdMotChanged();
    partial void OnIdLienChanging(int value);
    partial void OnIdLienChanged();
    #endregion
		
		public Recherche()
		{
			this._Historique = new EntitySet<Historique>(new Action<Historique>(this.attach_Historique), new Action<Historique>(this.detach_Historique));
			this._Mot = default(EntityRef<Mot>);
			this._Lien = default(EntityRef<Lien>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSearch", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdSearch
		{
			get
			{
				return this._IdSearch;
			}
			set
			{
				if ((this._IdSearch != value))
				{
					this.OnIdSearchChanging(value);
					this.SendPropertyChanging();
					this._IdSearch = value;
					this.SendPropertyChanged("IdSearch");
					this.OnIdSearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMot", DbType="Int NOT NULL")]
		public int IdMot
		{
			get
			{
				return this._IdMot;
			}
			set
			{
				if ((this._IdMot != value))
				{
					if (this._Mot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMotChanging(value);
					this.SendPropertyChanging();
					this._IdMot = value;
					this.SendPropertyChanged("IdMot");
					this.OnIdMotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLien", DbType="Int NOT NULL")]
		public int IdLien
		{
			get
			{
				return this._IdLien;
			}
			set
			{
				if ((this._IdLien != value))
				{
					if (this._Lien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLienChanging(value);
					this.SendPropertyChanging();
					this._IdLien = value;
					this.SendPropertyChanged("IdLien");
					this.OnIdLienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recherche_Historique", Storage="_Historique", ThisKey="IdSearch", OtherKey="IdSearch")]
		public EntitySet<Historique> Historique
		{
			get
			{
				return this._Historique;
			}
			set
			{
				this._Historique.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mot_Recherche", Storage="_Mot", ThisKey="IdMot", OtherKey="IdMot", IsForeignKey=true)]
		public Mot Mot
		{
			get
			{
				return this._Mot.Entity;
			}
			set
			{
				Mot previousValue = this._Mot.Entity;
				if (((previousValue != value) 
							|| (this._Mot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mot.Entity = null;
						previousValue.Recherche.Remove(this);
					}
					this._Mot.Entity = value;
					if ((value != null))
					{
						value.Recherche.Add(this);
						this._IdMot = value.IdMot;
					}
					else
					{
						this._IdMot = default(int);
					}
					this.SendPropertyChanged("Mot");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lien_Recherche", Storage="_Lien", ThisKey="IdLien", OtherKey="IdLien", IsForeignKey=true)]
		public Lien Lien
		{
			get
			{
				return this._Lien.Entity;
			}
			set
			{
				Lien previousValue = this._Lien.Entity;
				if (((previousValue != value) 
							|| (this._Lien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lien.Entity = null;
						previousValue.Recherche.Remove(this);
					}
					this._Lien.Entity = value;
					if ((value != null))
					{
						value.Recherche.Add(this);
						this._IdLien = value.IdLien;
					}
					else
					{
						this._IdLien = default(int);
					}
					this.SendPropertyChanged("Lien");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Historique(Historique entity)
		{
			this.SendPropertyChanging();
			entity.Recherche = this;
		}
		
		private void detach_Historique(Historique entity)
		{
			this.SendPropertyChanging();
			entity.Recherche = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Historique")]
	public partial class Historique : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdHist;
		
		private System.Nullable<System.DateTime> _DateHist;
		
		private int _IdSearch;
		
		private EntityRef<Recherche> _Recherche;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdHistChanging(int value);
    partial void OnIdHistChanged();
    partial void OnDateHistChanging(System.Nullable<System.DateTime> value);
    partial void OnDateHistChanged();
    partial void OnIdSearchChanging(int value);
    partial void OnIdSearchChanged();
    #endregion
		
		public Historique()
		{
			this._Recherche = default(EntityRef<Recherche>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdHist", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdHist
		{
			get
			{
				return this._IdHist;
			}
			set
			{
				if ((this._IdHist != value))
				{
					this.OnIdHistChanging(value);
					this.SendPropertyChanging();
					this._IdHist = value;
					this.SendPropertyChanged("IdHist");
					this.OnIdHistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateHist", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateHist
		{
			get
			{
				return this._DateHist;
			}
			set
			{
				if ((this._DateHist != value))
				{
					this.OnDateHistChanging(value);
					this.SendPropertyChanging();
					this._DateHist = value;
					this.SendPropertyChanged("DateHist");
					this.OnDateHistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSearch", DbType="Int NOT NULL")]
		public int IdSearch
		{
			get
			{
				return this._IdSearch;
			}
			set
			{
				if ((this._IdSearch != value))
				{
					if (this._Recherche.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSearchChanging(value);
					this.SendPropertyChanging();
					this._IdSearch = value;
					this.SendPropertyChanged("IdSearch");
					this.OnIdSearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recherche_Historique", Storage="_Recherche", ThisKey="IdSearch", OtherKey="IdSearch", IsForeignKey=true)]
		public Recherche Recherche
		{
			get
			{
				return this._Recherche.Entity;
			}
			set
			{
				Recherche previousValue = this._Recherche.Entity;
				if (((previousValue != value) 
							|| (this._Recherche.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recherche.Entity = null;
						previousValue.Historique.Remove(this);
					}
					this._Recherche.Entity = value;
					if ((value != null))
					{
						value.Historique.Add(this);
						this._IdSearch = value.IdSearch;
					}
					else
					{
						this._IdSearch = default(int);
					}
					this.SendPropertyChanged("Recherche");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lien")]
	public partial class Lien : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdLien;
		
		private string _UrlText;
		
		private string _UrlTitle;
		
		private EntitySet<Recherche> _Recherche;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdLienChanging(int value);
    partial void OnIdLienChanged();
    partial void OnUrlTextChanging(string value);
    partial void OnUrlTextChanged();
    partial void OnUrlTitleChanging(string value);
    partial void OnUrlTitleChanged();
    #endregion
		
		public Lien()
		{
			this._Recherche = new EntitySet<Recherche>(new Action<Recherche>(this.attach_Recherche), new Action<Recherche>(this.detach_Recherche));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLien", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdLien
		{
			get
			{
				return this._IdLien;
			}
			set
			{
				if ((this._IdLien != value))
				{
					this.OnIdLienChanging(value);
					this.SendPropertyChanging();
					this._IdLien = value;
					this.SendPropertyChanged("IdLien");
					this.OnIdLienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlText", DbType="VarChar(200)")]
		public string UrlText
		{
			get
			{
				return this._UrlText;
			}
			set
			{
				if ((this._UrlText != value))
				{
					this.OnUrlTextChanging(value);
					this.SendPropertyChanging();
					this._UrlText = value;
					this.SendPropertyChanged("UrlText");
					this.OnUrlTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlTitle", DbType="VarChar(200)")]
		public string UrlTitle
		{
			get
			{
				return this._UrlTitle;
			}
			set
			{
				if ((this._UrlTitle != value))
				{
					this.OnUrlTitleChanging(value);
					this.SendPropertyChanging();
					this._UrlTitle = value;
					this.SendPropertyChanged("UrlTitle");
					this.OnUrlTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lien_Recherche", Storage="_Recherche", ThisKey="IdLien", OtherKey="IdLien")]
		public EntitySet<Recherche> Recherche
		{
			get
			{
				return this._Recherche;
			}
			set
			{
				this._Recherche.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Recherche(Recherche entity)
		{
			this.SendPropertyChanging();
			entity.Lien = this;
		}
		
		private void detach_Recherche(Recherche entity)
		{
			this.SendPropertyChanging();
			entity.Lien = null;
		}
	}
}
#pragma warning restore 1591
